CHR =[]
for i in range(0, 2000):
  CHR.append(str(i))
CONFIG=["C1"]
REP = ["D1"]
#for i in range(1,101):
#  REP.append("D"+str(i))

wildcard_constraints:
    rep="[A-Z]\d+",
    config="C."

rule all:
    input:
        expand("output/Simulate_Genotypes/4PopSplit/{{rep}}/genos_{chr}.vcf", config=CONFIG,rep=REP, chr=CHR)


# Simluate Genotypes

rule simulate_genotypes_4popsplit:
    output:
        expand("output/Simulate_Genotypes/4PopSplit/{{rep}}/genos_{chr}.vcf", chr=CHR),
	      "output/Simulate_Genotypes/4PopSplit/{rep}/genos.pop"
    params:
        chr_num = len(CHR),
        seed = lambda wildcards: get_seed_msprime(wildcards.rep)
    shell:
        """
        python code/Simulate_Genotypes/generate_genotypes_4PopSplit.py \
	      --outpre output/Simulate_Genotypes/4PopSplit/{wildcards.rep}/genos \
	      --chr {params.chr_num} \
       	--Nanc 10000 \
	      --NA 10000 \
	      --NB 10000 \
	      --NC 10000 \
	      --ND 10000 \
  	    -a 40000 \
	      -b 40000 \
	      -c 40000 \
	      -d 40000 \
        -s1 5000 \
        -s2 2500 \
        -L 1000 \
        --seed {params.seed}
        """

rule format_VCF:
    input:
        "output/Simulate_Genotypes/4PopSplit/{rep}/genos_{chr}.vcf"
    output:
        gz="output/Simulate_Genotypes/4PopSplit/{rep}/genos_{chr}.ids.vcf.gz"
        #csi="output/Simulate_Genotypes/4PopSplit/{rep}/genos_{chr}.ids.vcf.gz.csi"
    shell:
        """
	      head -n6 {input} > output/Simulate_Genotypes/4PopSplit/{wildcards.rep}/header_{wildcards.chr}.txt
	      cat output/Simulate_Genotypes/4PopSplit/{wildcards.rep}/header_{wildcards.chr}.txt <(cat output/Simulate_Genotypes/4PopSplit/{wildcards.rep}/genos_{wildcards.chr}.vcf | awk -v OFS="\t" 'NR>6 {{$3=$1"_"$2"_A_T";$4="A"; $5="T"; print ;}}') | bgzip > {output.gz}
		    #bcftools index {output.gz}
			  rm output/Simulate_Genotypes/4PopSplit/{wildcards.rep}/header_{wildcards.chr}.txt
			  rm {input}
			  """

rule concat_vcfs:
    input:
        expand("output/Simulate_Genotypes/4PopSplit/{{rep}}/genos_{chr}.ids.vcf.gz", chr=CHR)
    output:
        "output/Simulate_Genotypes/4PopSplit/{rep}/genos.ids.vcf.gz"
    shell:
        """
        bcftools concat {input} -o output/Simulate_Genotypes/4PopSplit/{wildcards.rep}/temp.vcf.gz -O z
        bcftools annotate --rename-chrs code/Simulate_Genotypes/convert_chr.txt output/Simulate_Genotypes/4PopSplit/{wildcards.rep}/temp.vcf.gz -o {output} -O z
        rm output/Simulate_Genotypes/4PopSplit/{wildcards.rep}/temp.vcf.gz
	rm {input}
        """

rule convert_vcf_to_plink:
    input:
        "output/Simulate_Genotypes/4PopSplit/{rep}/genos.ids.vcf.gz"
    output:
        "output/Simulate_Genotypes/4PopSplit/{rep}/genos.psam",
        "output/Simulate_Genotypes/4PopSplit/{rep}/genos.pgen",
        "output/Simulate_Genotypes/4PopSplit/{rep}/genos.pvar"
    shell:
        """
        plink2 \
        --double-id \
        --make-pgen \
        --out output/Simulate_Genotypes/4PopSplit/{wildcards.rep}/genos \
        --vcf {input}
        """

rule create_panels_4PopSplit:
    input:
        "output/Simulate_Genotypes/4PopSplit/{rep}/genos.pop"
    output:
        C1_gwas = "output/Simulate_Genotypes/4PopSplit/{rep}/C1/ids.gwas",
        C1_test = "output/Simulate_Genotypes/4PopSplit/{rep}/C1/ids.test",
        C2_gwas = "output/Simulate_Genotypes/4PopSplit/{rep}/C2/ids.gwas",
        C2_test ="output/Simulate_Genotypes/4PopSplit/{rep}/C2/ids.test"
    params:
        size = SIZE,
        seed = lambda wildcards: get_seed_msprime(wildcards.rep)
    shell:
        "Rscript code/Simulate_Genotypes/split_gwas-test_4PopSplit.R {input} {params.size} {output.C1_gwas} {output.C1_test} {output.C2_gwas} {output.C2_test} {params.seed}"

rule split_into_test_gwas:
    input:
        gwas="output/Simulate_Genotypes/4PopSplit/{rep}/{config}/ids.gwas",
        test="output/Simulate_Genotypes/4PopSplit/{rep}/{config}/ids.test",
        psam="output/Simulate_Genotypes/4PopSplit/{rep}/genos.psam"
    output:
        "output/Simulate_Genotypes/4PopSplit/{rep}/{config}/genos-test.psam",
        "output/Simulate_Genotypes/4PopSplit/{rep}/{config}/genos-test.pvar",
        "output/Simulate_Genotypes/4PopSplit/{rep}/{config}/genos-test.pgen",
        "output/Simulate_Genotypes/4PopSplit/{rep}/{config}/genos-gwas.psam",
        "output/Simulate_Genotypes/4PopSplit/{rep}/{config}/genos-gwas.pvar",
        "output/Simulate_Genotypes/4PopSplit/{rep}/{config}/genos-gwas.pgen"
    shell:
        """
	      plink2 \
	      --keep {input.gwas} \
		    --make-pgen \
			  --out output/Simulate_Genotypes/4PopSplit/{wildcards.rep}/{wildcards.config}/genos-gwas \
				--pfile output/Simulate_Genotypes/4PopSplit/{wildcards.rep}/genos \
				--rm-dup exclude-all

        plink2 \
        --keep {input.test} \
        --make-pgen \
        --out output/Simulate_Genotypes/4PopSplit/{wildcards.rep}/{wildcards.config}/genos-test \
        --pfile output/Simulate_Genotypes/4PopSplit/{wildcards.rep}/genos \
	      --rm-dup exclude-all
	      """

rule get_variant_freq:
    input:
        "output/Simulate_Genotypes/4PopSplit/{rep}/{config}/genos-test.psam"
    output:
        "output/Simulate_Genotypes/4PopSplit/{rep}/{config}/genos-test.afreq",
        "output/Simulate_Genotypes/4PopSplit/{rep}/{config}/genos-gwas.afreq"
    shell:
        """
        plink2 \
	      --pfile output/Simulate_Genotypes/4PopSplit/{wildcards.rep}/{wildcards.config}/genos-test \
	      --freq \
		    --out output/Simulate_Genotypes/4PopSplit/{wildcards.rep}/{wildcards.config}/genos-test

			  plink2 \
        --pfile output/Simulate_Genotypes/4PopSplit/{wildcards.rep}/{wildcards.config}/genos-gwas \
        --freq \
        --out output/Simulate_Genotypes/4PopSplit/{wildcards.rep}/{wildcards.config}/genos-gwas
        """

rule get_common_snp_list:
    input:
        "output/Simulate_Genotypes/4PopSplit/{rep}/{config}/genos-test.afreq",
        "output/Simulate_Genotypes/4PopSplit/{rep}/{config}/genos-gwas.afreq"
    output:
        "output/Simulate_Genotypes/4PopSplit/{rep}/{config}/common_snp_ids.txt"
    script:
        "code/Simulate_Genotypes/get_common_snp_list.R"

rule remake_panels_with_common_snps:
    input:
        common_id="output/Simulate_Genotypes/4PopSplit/{rep}/{config}/common_snp_ids.txt",
        test="output/Simulate_Genotypes/4PopSplit/{rep}/{config}/genos-test.psam",
        gwas="output/Simulate_Genotypes/4PopSplit/{rep}/{config}/genos-gwas.psam",
    output:
        "output/Simulate_Genotypes/4PopSplit/{rep}/{config}/genos-test_common.psam",
        "output/Simulate_Genotypes/4PopSplit/{rep}/{config}/genos-gwas_common.psam"
    shell:
        """
        plink2 \
        --pfile output/Simulate_Genotypes/4PopSplit/{wildcards.rep}/{wildcards.config}/genos-test \
        --extract {input.common_id} \
        --out output/Simulate_Genotypes/4PopSplit/{wildcards.rep}/{wildcards.config}/genos-test_common \
	      --make-pgen

        plink2 \
        --pfile output/Simulate_Genotypes/4PopSplit/{wildcards.rep}/{wildcards.config}/genos-gwas \
        --extract {input.common_id} \
        --out output/Simulate_Genotypes/4PopSplit/{wildcards.rep}/{wildcards.config}/genos-gwas_common \
	      --make-pgen
        """

rule common_snp_freq:
    input:
        "output/Simulate_Genotypes/4PopSplit/{rep}/{config}/genos-gwas_common.psam",
        "output/Simulate_Genotypes/4PopSplit/{rep}/{config}/genos-test_common.psam"
    output:
        "output/Simulate_Genotypes/4PopSplit/{rep}/{config}/genos-gwas_common.afreq",
        "output/Simulate_Genotypes/4PopSplit/{rep}/{config}/genos-test_common.afreq"
    shell:
        """
        plink2 \
	      --pfile output/Simulate_Genotypes/4PopSplit/{wildcards.rep}/{wildcards.config}/genos-gwas_common \
	      --out output/Simulate_Genotypes/4PopSplit/{wildcards.rep}/{wildcards.config}/genos-gwas_common \
		    --freq

		    plink2 \
	      --pfile output/Simulate_Genotypes/4PopSplit/{wildcards.rep}/{wildcards.config}/genos-test_common \
	      --out output/Simulate_Genotypes/4PopSplit/{wildcards.rep}/{wildcards.config}/genos-test_common \
		    --freq
		    """

#rule aggregate_genotypes:
#    input:
#        frq_common_gwas=expand("output/Simulate_Genotypes/4PopSplit/{rep}/{config}/genos-gwas_common.afreq", rep=REP, config=CONFIG),
#        frq_common_test=expand("output/Simulate_Genotypes/4PopSplit/{rep}/{config}/genos-test_common.afreq", rep=REP, config=CONFIG),
#        genos=expand("output/Simulate_Genotypes/4PopSplit/{rep}/genos_{chr}.vcf", chr=CHR, rep=REP, config=CONFIG),
#        gz_chr=expand("output/Simulate_Genotypes/4PopSplit/{rep}/genos_{chr}.ids.vcf.gz", chr=CHR, rep=REP),
#        frq_test=expand("output/Simulate_Genotypes/4PopSplit/{rep}/{config}/genos-test.afreq", rep=REP, config=CONFIG),
#        frq_gwas=expand("output/Simulate_Genotypes/4PopSplit/{rep}/{config}/genos-gwas.afreq", rep=REP, config=CONFIG),
#        gz=expand("output/Simulate_Genotypes/4PopSplit/{rep}/genos.ids.vcf.gz", rep=REP),
#        gwas_pgen=expand("output/Simulate_Genotypes/4PopSplit/{rep}/{config}/genos-gwas.pgen", rep=REP, config=CONFIG),
#        gwas_pvar=expand("output/Simulate_Genotypes/4PopSplit/{rep}/{config}/genos-gwas.pvar", rep=REP, config=CONFIG),
#        gwas_psam=expand("output/Simulate_Genotypes/4PopSplit/{rep}/{config}/genos-gwas.psam", rep=REP, config=CONFIG),
#        test_pgen=expand("output/Simulate_Genotypes/4PopSplit/{rep}/{config}/genos-test.pgen", rep=REP, config=CONFIG),
#        test_pvar=expand("output/Simulate_Genotypes/4PopSplit/{rep}/{config}/genos-test.pvar", rep=REP, config=CONFIG),
#        test_psam=expand("output/Simulate_Genotypes/4PopSplit/{rep}/{config}/genos-test.psam", rep=REP, config=CONFIG),
#        pgen=expand("output/Simulate_Genotypes/4PopSplit/{rep}/genos.pgen", rep=REP, config=CONFIG),
#        pvar=expand("output/Simulate_Genotypes/4PopSplit/{rep}/genos.pvar", rep=REP, config=CONFIG),
#        psam=expand("output/Simulate_Genotypes/4PopSplit/{rep}/genos.psam", rep=REP, config=CONFIG)
#    output:
#        expand("output/Simulate_Genotypes/4PopSplit/{rep}/ff.txt", rep=REP)
#    shell:
#        """
#	      touch {output}
#	      echo {input.frq_common_gwas}
#	      echo {input.frq_common_test}
#	      rm {input.genos}
#	      rm {input.frq_test}
#	      rm {input.frq_gwas}
#	      rm {input.gz}
#	      rm {input.gz_chr}
#	      rm {input.gwas_pgen}
#	      rm {input.gwas_pvar}
#	      rm {input.gwas_psam}
#	      rm {input.test_pgen}
#	      rm {input.test_pvar}
#	      rm {input.test_psam}
#	      rm {input.pgen}
#	      rm {input.pvar}
#	      rm {input.psam}
#	      """


# GWAS PCA

rule GWAS_PCA:
    input:
        psam="output/Simulate_Genotypes/4PopSplit/{rep}/{config}/genos-gwas_common.psam",
        pgen="output/Simulate_Genotypes/4PopSplit/{rep}/{config}/genos-gwas_common.pgen",
        pvar="output/Simulate_Genotypes/4PopSplit/{rep}/{config}/genos-gwas_common.pvar"
    output:
        "output/PGA_test/4PopSplit/{rep}/{config}/genos-gwas.eigenvec",
        "output/PGA_test/4PopSplit/{rep}/{config}/genos-gwas.eigenval"
    shell:
        """
        plink2 \
	      --pfile output/Simulate_Genotypes/4PopSplit/{wildcards.rep}/{wildcards.config}/genos-gwas_common \
	      --out output/PGA_test/4PopSplit/{wildcards.rep}/{wildcards.config}/genos-gwas \
		    --pca 10 approx
		    """


# Do PGA test

rule Calc_Qx:
  input:
    tp_genos="output/Simulate_Genotypes/4PopSplit/{rep}/{config}/genos-test_common.psam",
    gp_genos="output/Simulate_Genotypes/4PopSplit/{rep}/{config}/genos-gwas_common.psam",
    evec="output/PGA_test/4PopSplit/{rep}/{config}/genos-gwas.eigenvec"
  output:
    qx="output/PGA_test/4PopSplit/{rep}/{config}/q.txt"
  shell:
    """
    Rscript code/PGA_test/ts_fig.R output/Simulate_Genotypes/4PopSplit/{wildcards.rep}/{wildcards.config}/genos-gwas_common output/Simulate_Genotypes/4PopSplit/{wildcards.rep}/{wildcards.config}/genos-test_common {output} {input.evec}
    """



