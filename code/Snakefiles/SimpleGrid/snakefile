CHR =["0", "1"]
REP = ["E1"]
CONFIG = ["C1"]
SS_TEST = 5 # Number of inidividuals per deme

def get_params(x):
  out = x.split("-")[1]
  return out

def get_seed(rep, h2):
  out1 = list(rep)[1]
  out2 = h2.split("-")[1]
  return out1 + out2

print(REP)

rule all:
    input:
        expand("output/Simulate_Genotypes/SimpleGrid/{rep}/{config}/genos-test_common.afreq", rep=REP, config=CONFIG)

# Simluate Genotypes

rule simulate_genotypes_SimpleGrid:
    output:
        expand("output/Simulate_Genotypes/SimpleGrid/{{rep}}/genos_{chr}.vcf", chr=CHR),
	      "output/Simulate_Genotypes/SimpleGrid/{rep}/genos.pop"
    shell:
        "python code/Simulate_Genotypes/generate_genotypes_SimpleGrid.py \
	       --outpre output/Simulate_Genotypes/SimpleGrid/{wildcards.rep}/genos \
	       --chr 2 \
	       --sample_size 15 \
	       --length 10000000 \
	       --Ne 10000 \
	       --tmove 100"

rule format_VCF:
    input:
        "output/Simulate_Genotypes/SimpleGrid/{rep}/genos_{chr}.vcf"
    output:
        gz="output/Simulate_Genotypes/SimpleGrid/{rep}/genos_{chr}.ids.vcf.gz"
	      #csi="output/Simulate_Genotypes/SimpleGrid/{rep}/genos_{chr}.ids.vcf.gz.csi"
    shell:
        """
	      head -n6 {input} > output/Simulate_Genotypes/SimpleGrid/{wildcards.rep}/header_{wildcards.chr}.txt
	            cat output/Simulate_Genotypes/SimpleGrid/{wildcards.rep}/header_{wildcards.chr}.txt <(cat output/Simulate_Genotypes/SimpleGrid/{wildcards.rep}/genos_{wildcards.chr}.vcf | awk -v OFS="\t" 'NR>6 {{$3=$1"_"$2"_A_T";$4="A"; $5="T"; print ;}}') | bgzip > {output.gz}
		          #bcftools index {output.gz}
			        rm output/Simulate_Genotypes/SimpleGrid/{wildcards.rep}/header_{wildcards.chr}.txt
				      """
rule concat_vcfs:
    input:
        expand("output/Simulate_Genotypes/SimpleGrid/{{rep}}/genos_{chr}.ids.vcf.gz", chr=CHR)
    output:
        "output/Simulate_Genotypes/SimpleGrid/{rep}/genos.ids.vcf.gz"
    shell:
        "bcftools concat {input} -o {output} -O z"

rule convert_vcf_to_plink:
    input:
        "output/Simulate_Genotypes/SimpleGrid/{rep}/genos.ids.vcf.gz"
    output:
        "output/Simulate_Genotypes/SimpleGrid/{rep}/genos.psam",
	      "output/Simulate_Genotypes/SimpleGrid/{rep}/genos.pgen",
      	"output/Simulate_Genotypes/SimpleGrid/{rep}/genos.pvar"
    shell:
        "plink2 \
        --double-id \
        --make-pgen \
        --out output/Simulate_Genotypes/SimpleGrid/{wildcards.rep}/genos \
        --vcf {input}"

rule create_panels_SimpleGrid:
    input:
        "output/Simulate_Genotypes/SimpleGrid/{rep}/genos.pop"
    output:
        gwas="output/Simulate_Genotypes/SimpleGrid/{rep}/C1/ids.gwas",
	      test="output/Simulate_Genotypes/SimpleGrid/{rep}/C1/ids.test"
    params:
        ss_test = SS_TEST
    shell:
        "Rscript code/Simulate_Genotypes/split_gwas-test_SimpleGrid.R {params.ss_test} {input} {output.gwas} {output.test}"


rule split_into_test_gwas:
    input:
        gwas="output/Simulate_Genotypes/SimpleGrid/{rep}/{config}/ids.gwas",
	      test="output/Simulate_Genotypes/SimpleGrid/{rep}/{config}/ids.test",
	      psam="output/Simulate_Genotypes/SimpleGrid/{rep}/genos.psam",
		    pvar="output/Simulate_Genotypes/SimpleGrid/{rep}/genos.pvar",
			  pgen="output/Simulate_Genotypes/SimpleGrid/{rep}/genos.pgen"
    output:
        "output/Simulate_Genotypes/SimpleGrid/{rep}/{config}/genos-test.psam",
	      "output/Simulate_Genotypes/SimpleGrid/{rep}/{config}/genos-test.pgen",
	      "output/Simulate_Genotypes/SimpleGrid/{rep}/{config}/genos-test.pvar",
	      "output/Simulate_Genotypes/SimpleGrid/{rep}/{config}/genos-gwas.psam",
	      "output/Simulate_Genotypes/SimpleGrid/{rep}/{config}/genos-gwas.pgen",
	      "output/Simulate_Genotypes/SimpleGrid/{rep}/{config}/genos-gwas.pvar"
    shell:
        """
	      plink2 \
	            --keep {input.gwas} \
		          --make-pgen \
			        --out output/Simulate_Genotypes/SimpleGrid/{wildcards.rep}/{wildcards.config}/genos-gwas \
				      --pfile output/Simulate_Genotypes/SimpleGrid/{wildcards.rep}/genos \
				            --rm-dup exclude-all

        plink2 \
        --keep {input.test} \
        --make-pgen \
        --out output/Simulate_Genotypes/SimpleGrid/{wildcards.rep}/{wildcards.config}/genos-test \
        --pfile output/Simulate_Genotypes/SimpleGrid/{wildcards.rep}/genos \
	      --rm-dup exclude-all
	            """

rule get_variant_freq:
    input:
          "output/Simulate_Genotypes/SimpleGrid/{rep}/{config}/genos-test.psam",
	        "output/Simulate_Genotypes/SimpleGrid/{rep}/{config}/genos-test.pvar",
		      "output/Simulate_Genotypes/SimpleGrid/{rep}/{config}/genos-test.pgen"
    output:
        "output/Simulate_Genotypes/SimpleGrid/{rep}/{config}/genos-test.afreq",
	      "output/Simulate_Genotypes/SimpleGrid/{rep}/{config}/genos-gwas.afreq"
    shell:
        """
        plink2 \
	      --pfile output/Simulate_Genotypes/SimpleGrid/{wildcards.rep}/{wildcards.config}/genos-test \
	            --freq \
		          --out output/Simulate_Genotypes/SimpleGrid/{wildcards.rep}/{wildcards.config}/genos-test

			        plink2 \
        --pfile output/Simulate_Genotypes/SimpleGrid/{wildcards.rep}/{wildcards.config}/genos-gwas \
        --freq \
        --out output/Simulate_Genotypes/SimpleGrid/{wildcards.rep}/{wildcards.config}/genos-gwas
        """

rule get_common_snp_list:
    input:
        "output/Simulate_Genotypes/SimpleGrid/{rep}/{config}/genos-test.afreq",
        "output/Simulate_Genotypes/SimpleGrid/{rep}/{config}/genos-gwas.afreq"
    output:
        "output/Simulate_Genotypes/SimpleGrid/{rep}/{config}/common_snp_ids.txt"
    script:
        "code/Simulate_Genotypes/get_common_snp_list.R"

rule remake_panels_with_common_snps:
    input:
        common_id="output/Simulate_Genotypes/SimpleGrid/{rep}/{config}/common_snp_ids.txt",
	      test_psam="output/Simulate_Genotypes/SimpleGrid/{rep}/{config}/genos-test.psam",
	            test_pvar="output/Simulate_Genotypes/SimpleGrid/{rep}/{config}/genos-test.pvar",
		          test_pgen="output/Simulate_Genotypes/SimpleGrid/{rep}/{config}/genos-test.pgen",
			        gwas_psam="output/Simulate_Genotypes/SimpleGrid/{rep}/{config}/genos-gwas.psam",
				      gwas_pvar="output/Simulate_Genotypes/SimpleGrid/{rep}/{config}/genos-gwas.pvar",
				      gwas_pgen="output/Simulate_Genotypes/SimpleGrid/{rep}/{config}/genos-gwas.pgen"
    output:
        "output/Simulate_Genotypes/SimpleGrid/{rep}/{config}/genos-test_common.psam",
        "output/Simulate_Genotypes/SimpleGrid/{rep}/{config}/genos-test_common.pvar",
	      "output/Simulate_Genotypes/SimpleGrid/{rep}/{config}/genos-test_common.pgen",
	      "output/Simulate_Genotypes/SimpleGrid/{rep}/{config}/genos-gwas_common.psam",
		    "output/Simulate_Genotypes/SimpleGrid/{rep}/{config}/genos-gwas_common.pvar",
			  "output/Simulate_Genotypes/SimpleGrid/{rep}/{config}/genos-gwas_common.pgen",
			  "output/Simulate_Genotypes/SimpleGrid/{rep}/{config}/genos-gwas_common.afreq",
        "output/Simulate_Genotypes/SimpleGrid/{rep}/{config}/genos-test_common.afreq"
    shell:
        """
        plink2 \
        --pfile output/Simulate_Genotypes/SimpleGrid/{wildcards.rep}/{wildcards.config}/genos-test \
        --extract {input.common_id} \
        --out output/Simulate_Genotypes/SimpleGrid/{wildcards.rep}/{wildcards.config}/genos-test_common \
	      --make-pgen

        plink2 \
        --pfile output/Simulate_Genotypes/SimpleGrid/{wildcards.rep}/{wildcards.config}/genos-gwas \
        --extract {input.common_id} \
        --out output/Simulate_Genotypes/SimpleGrid/{wildcards.rep}/{wildcards.config}/genos-gwas_common \
	      --make-pgen

	     plink2 \
	     --pfile output/Simulate_Genotypes/SimpleGrid/{wildcards.rep}/{wildcards.config}/genos-gwas_common \
	     --out output/Simulate_Genotypes/SimpleGrid/{wildcards.rep}/{wildcards.config}/genos-gwas_common \
		   --freq

        plink2 \
	      --pfile output/Simulate_Genotypes/SimpleGrid/{wildcards.rep}/{wildcards.config}/genos-test_common \
	      --out output/Simulate_Genotypes/SimpleGrid/{wildcards.rep}/{wildcards.config}/genos-test_common \
		    --freq
        """

rule aggregate_genotypes:
    input:
        genos=expand("output/Simulate_Genotypes/SimpleGrid/{rep}/genos_{chr}.vcf", chr=CHR, rep=REP, config=CONFIG),
        gz_chr=expand("output/Simulate_Genotypes/SimpleGrid/{rep}/genos_{chr}.ids.vcf.gz", chr=CHR, rep=REP),
        frq_test=expand("output/Simulate_Genotypes/SimpleGrid/{rep}/{config}/genos-test.afreq", rep=REP, config=CONFIG),
        frq_gwas=expand("output/Simulate_Genotypes/SimpleGrid/{rep}/{config}/genos-gwas.afreq", rep=REP, config=CONFIG),
        gz=expand("output/Simulate_Genotypes/SimpleGrid/{rep}/genos.ids.vcf.gz", rep=REP),
	      gwas_pgen=expand("output/Simulate_Genotypes/SimpleGrid/{rep}/{config}/genos-gwas.pgen", rep=REP, config=CONFIG),
	      gwas_pvar=expand("output/Simulate_Genotypes/SimpleGrid/{rep}/{config}/genos-gwas.pvar", rep=REP, config=CONFIG),
	      gwas_psam=expand("output/Simulate_Genotypes/SimpleGrid/{rep}/{config}/genos-gwas.psam", rep=REP, config=CONFIG),
	      test_pgen=expand("output/Simulate_Genotypes/SimpleGrid/{rep}/{config}/genos-test.pgen", rep=REP, config=CONFIG),
	      test_pvar=expand("output/Simulate_Genotypes/SimpleGrid/{rep}/{config}/genos-test.pvar", rep=REP, config=CONFIG),
	      test_psam=expand("output/Simulate_Genotypes/SimpleGrid/{rep}/{config}/genos-test.psam", rep=REP, config=CONFIG),
	      pgen=expand("output/Simulate_Genotypes/SimpleGrid/{rep}/genos.pgen", rep=REP, config=CONFIG),
	      pvar=expand("output/Simulate_Genotypes/SimpleGrid/{rep}/genos.pvar", rep=REP, config=CONFIG),
	      psam=expand("output/Simulate_Genotypes/SimpleGrid/{rep}/genos.psam", rep=REP, config=CONFIG),
	      keep=expand("output/Simulate_Genotypes/SimpleGrid/{rep}/{config}/genos-gwas_common.psam", rep=REP, config=CONFIG)
    output:
        expand("output/Simulate_Genotypes/SimpleGrid/{rep}/ff.txt", rep=REP)
    shell:
        """
	 touch {output}
	 touch {input.keep}
	 rm {input.genos}
	 rm {input.frq_test}
	 rm {input.frq_gwas}
	 rm {input.gz}
	 rm {input.gz_chr}
	 rm {input.gwas_pgen}
	 rm {input.gwas_pvar}
	 rm {input.gwas_psam}
	 rm {input.test_pgen}
	 rm {input.test_pvar}
	 rm {input.test_psam}
	 rm {input.pgen}
	 rm {input.pvar}
	 rm {input.psam}
	 """


